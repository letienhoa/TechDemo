package com.order.zalopay;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.order.response.DataZaloPayCreateResponse;

@SuppressWarnings("serial")
@CrossOrigin(origins = "*")
//@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/zalo-pay")
public class ZaloPayController {



	@SuppressWarnings("serial")
	@RequestMapping(value = "/get-code", method = RequestMethod.POST)
	public ResponseEntity<?> getCodeZaloPay(
			@RequestParam(name = "title", required = false, defaultValue = "Thanh Toan") String title,
			@RequestParam(name = "appUser", required = false, defaultValue = "Duc handsome") String appUsers,
			@RequestParam(name = "description", required = false, defaultValue = "Order") String description
			) throws Exception {
		// Xử lý lưu trữ thông tin vé
		//// Vé 2
		String codeSlot2 = "isNull";
		Integer vnp_Amounti = (int) 1000000;
		//

		String callbackUrl ="call xuống backend để lưu thông tin"; 
				/*linksG.getLinksUrlApp() + "api/zalo-pay/submit?" + "&sdt=" + wrapper.getSdt().toString()
				+ "&email=" + wrapper.getEmail().toString() + "&code_slot1=" + codeSlot1.toString() + "&code_slot2="
				+ codeSlot2.toString();*/

		Map<String, Object> order = new HashMap<String, Object>() {
			{
				String codeTranId = ZaloPayConfig.getAppTransId();
				String timeNow = ZaloPayConfig.getAppTime().toString();
				put("app_id", ZaloPayConfig.appId.toString());
				put("app_user", appUsers);
				put("app_trans_id", codeTranId);
				put("app_time", timeNow);
				put("amount", vnp_Amounti.toString());
				put("order_type", "GOODS");
				put("title", title);
				put("description", description);
				put("callback_url", callbackUrl);
				put("item", ZaloPayConfig.getItem());
				put("embed_data", ZaloPayConfig.getEmbedData(callbackUrl));
				put("mac", ZaloPayConfig.getMac(timeNow, codeTranId, appUsers, vnp_Amounti.toString(), callbackUrl));
				put("currency", "VND");
				put("bank_code", "");

			}
		};
		String query = ZaloPayConfig.generateQueryUrl(order);

		// connect to get links
		URIBuilder uri = new URIBuilder("https://sb-openapi.zalopay.vn/v2/create?" + query);

		CloseableHttpClient client = HttpClients.createDefault();
		HttpPost post = new HttpPost(uri.build());

		CloseableHttpResponse res = client.execute(post);
		BufferedReader rd = new BufferedReader(new InputStreamReader(res.getEntity().getContent()));
		StringBuilder resultJsonStr = new StringBuilder();
		String line;
		while ((line = rd.readLine()) != null) {
			resultJsonStr.append(line);
		}
		JSONObject result = new JSONObject(resultJsonStr.toString());
		
		return ResponseEntity.ok( new Gson().fromJson(result.toString(), DataZaloPayCreateResponse.class));
	}

	
	
	@RequestMapping(value = "/submit", method = RequestMethod.GET)
	public String post(
			throws UnsupportedEncodingException {

		String button = "<a href=\r\n" + "đây là link front end khi bấm vào button này" + "success/" + "hihi" + ">\r\n"
				+ "<button style=\"vertical-align:middle;position: relative;display: inline-block;\r\n"
				+ "  border-radius: 4px;\r\n" + "  background-color: #f4511e;\r\n" + "  border: none;\r\n"
				+ "  color: #FFFFFF;\r\n" + "  text-align: center;\r\n" + "  font-size: 22px;\r\n"
				+ "  padding: 20px;\r\n" + "  width: 35%;\r\n" + "  transition: all 0.5s;\r\n"
				+ "  cursor: pointer;\r\n" + "  margin-left: 30%;\">" + "OK" + "</button>" + "</a>";
		String responses = "<div><h1 style=\" text-align: center	\">THANH TOÁN THÀNH CÔNG</h1></div>" + button;
		Long messageSQL2 = 0L;
		Long message2 = 0L;

		if ( message2 == 1 || messageSQL2 == 1) {
			responses = "<div><h1 style=\" text-align: center;	\">THANH TOÁN THẤT BẠI</h1></div>" + button;
		} else {
			responses = "<div><h1 style=\" text-align: center;	\">THANH TOÁN THÀNH CÔNG</h1></div>" + button;
		}
		return responses;
	}

	@RequestMapping(value = "/get-code-query", method = RequestMethod.GET)
	public ResponseEntity<?> getCodeQuery(
			@RequestParam(name = "app_trans_id", required = false, defaultValue = "Dinh kute") String appTransId)
			throws Exception {
		Map<String, Object> order = new HashMap<String, Object>() {
			{
				put("app_id", ZaloPayConfig.appId);
				put("app_trans_id", appTransId);
				put("mac", ZaloPayConfig.getMacForQuery(appTransId));

			}
		};
		List<NameValuePair> params = new ArrayList<>();
		params.add(new BasicNameValuePair("app_id", ZaloPayConfig.appId.toString()));
		params.add(new BasicNameValuePair("app_trans_id", appTransId));
		params.add(new BasicNameValuePair("mac", ZaloPayConfig.getMacForQuery(appTransId)));
		URIBuilder uri = new URIBuilder("https://sb-openapi.zalopay.vn/v2/query");
		uri.addParameters(params);
		CloseableHttpClient client = HttpClients.createDefault();
		HttpPost post = new HttpPost(uri.build());
		// Content-Type: application/x-www-form-urlencoded
		post.setEntity(new UrlEncodedFormEntity(params));

		CloseableHttpResponse res = client.execute(post);
		BufferedReader rd = new BufferedReader(new InputStreamReader(res.getEntity().getContent()));
		StringBuilder resultJsonStr = new StringBuilder();
		String line;

		while ((line = rd.readLine()) != null) {
			resultJsonStr.append(line);
		}
		JSONObject result = new JSONObject(resultJsonStr.toString());
		System.out.print(result);
		String query = ZaloPayConfig.generateQueryUrl(order);
		return ResponseEntity.ok(query);
	}

//	@RequestMapping(value = "/refund", method = RequestMethod.GET)
//	public ResponseEntity<BaseResponse> refund(
//			@RequestParam(name = "app_trans_id", required = false, defaultValue = "Dinh kute") String appTransId)
//			throws Exception {
//		BaseResponse response = new BaseResponse();
//
//		Map<String, Object> order = new HashMap<String, Object>() {
//			{
//				put("app_id", ZaloPayConfig.appId);
//				put("app_trans_id", appTransId);
//				put("mac", ZaloPayConfig.getMacForQuery(appTransId));
//
//			}
//		};
//
//		List<NameValuePair> params = new ArrayList<>();
//		params.add(new BasicNameValuePair("app_id", ZaloPayConfig.appId.toString()));
//		params.add(new BasicNameValuePair("app_trans_id", appTransId));
//		params.add(new BasicNameValuePair("mac", ZaloPayConfig.getMacForQuery(appTransId)));
//
//		URIBuilder uri = new URIBuilder("https://sb-openapi.zalopay.vn/v2/query");
//		uri.addParameters(params);
//
//		CloseableHttpClient client = HttpClients.createDefault();
//		HttpPost post = new HttpPost(uri.build());
//
//		// Content-Type: application/x-www-form-urlencoded
//		post.setEntity(new UrlEncodedFormEntity(params));
//
//		CloseableHttpResponse res = client.execute(post);
//		BufferedReader rd = new BufferedReader(new InputStreamReader(res.getEntity().getContent()));
//		StringBuilder resultJsonStr = new StringBuilder();
//		String line;
//
//		while ((line = rd.readLine()) != null) {
//			resultJsonStr.append(line);
//		}
//		JSONObject result = new JSONObject(resultJsonStr.toString());
//		DataRefundResponse data = new Gson().fromJson(result.toString(), DataRefundResponse.class);
//		response.setData(data);
//		return new ResponseEntity<BaseResponse>(response, HttpStatus.OK);
//	}


		
	

}
